@{
    ViewData["Title"] = "Products Page";
}

<div>
    <h2>Products</h2>
</div>

<div id="app" class="row">
    <div class="col-md-12">
        <div class="alert alert-info" v-if="feedback">
            {{feedback}}
        </div>
    </div>
    <div class="col-md-12 flex-column">
        <div>
            <button class="btn btn-info" style="margin: 15px;" v-on:click.prevent="toEditMode(false)">Add</button>
        </div>
        <div class="col-md-6  float-left">
            <ul class="list-group">
                <li class="list-group-item text-center" style="margin-bottom:5px;" v-for="product in products" v-on:click="getProductDetails(product)">
                    <div>
                        <figure>
                            <img v-bind:src="product.image" width="150" />
                        </figure>
                    </div>
                    <div>
                        <label>{{product.name}}</label>
                    </div>
                    <div>
                        <figure>
                            <img v-bind:src="product.brand.image" width="100" />
                        </figure>
                    </div>
                    <div>
                        <label>€{{product.price}}</label>
                    </div>
                </li>
            </ul>
        </div>
        <div class="col-md-6 float-left">
            <div v-if="productRequest">
                <div class="form-group">
                    <label>Name</label>
                    <input class="form-control" v-model="productRequest.name" v-bind:readonly="isReadOnly" />
                </div>
                <div class="form-group">
                    <label>Image</label>
                    <figure class="text-center">
                        <img v-bind:src="productRequest.image" width="120" />
                    </figure>
                    <div class="form-group">
                        <label>
                            Add image link
                            <input type="file" accept="image/*" id="file-input" class="form-control" />
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <label>Price</label>
                    <input type="number" class="form-control" v-model="productRequest.price" v-bind:readonly="isReadOnly" />
                </div>
                <div class="form-group">
                    <label>Brand</label>
                    <input class="form-control" v-if="isReadOnly && productResponse != null" v-model="productResponse.brand.name" v-bind:readonly="isReadOnly" />
                    <select v-else class="form-control" v-model="productRequest.brandId" v-bind:readonly="isReadOnly">
                        <option v-for="brand in brands" v-bind:value="brand.id" v-bind:text="brand.name">{{brand.name}}</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Category</label>
                    <input class="form-control" v-if="isReadOnly && productResponse != null" v-model="productResponse.category.name" v-bind:readonly="isReadOnly" />
                    <select v-else class="form-control" v-model="productRequest.categoryId" v-bind:readonly="isReadOnly">
                        <option v-for="category in categories" v-bind:value="category.id">{{category.name}}</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Subcategory</label>
                    <input class="form-control" v-if="isReadOnly && productResponse != null" v-model="productResponse.subcategory.name" v-bind:readonly="isReadOnly" />
                    <select v-else class="form-control" v-model="productRequest.subCategoryId" v-bind:readonly="isReadOnly">
                        <option v-for="subcategory in subcategories" v-bind:value="subcategory.id">{{subcategory.name}}</option>
                    </select>
                </div>
                <div class="btn-group">
                    <button class="btn btn-warning" v-if="isReadOnly" v-on:click.prevent="toEditMode(true)">Edit</button>
                    <button class="btn btn-warning" v-if="!isReadOnly" v-on:click.prevent="saveProduct">Save</button>
                    <button class="btn btn-primary" v-if="!isReadOnly" v-on:click.prevent="isReadOnly = true">Cancel</button>
                    <button class="btn btn-danger" v-on:click.prevent="deleteProduct">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/axios/axios.min.js"></script>

    <script>
        var apiBase = 'https://localhost:5001/api/';
        var axiosConfig;
        var token = localStorage.getItem('jwtToken');
        if (token != null) {
            axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;
        }

        var app = new Vue({
            el: '#app',
            data: {
                brands: null,
                categories: null,
                subcategories: null,
                products: null,
                productRequest: null,
                productResponse: null,
                currentProduct: null,
                selectedImage: null,
                isReadOnly: true,
                feedback: '',
                statuses: [{ name: 'Active' }, { name: 'Inactive' }],
                isEditMode: false,
                isDeleteMode: false,
            },
            created: function () {
                var self = this;
                self.fetchProducts();
                self.fetchBrands();
                self.fetchCategories();
                self.fetchSubcategories();
            },
            methods: {
                fetchProducts: function () {
                    var self = this;

                    axios.get(apiBase + 'Products')
                        .then(function (response) {
                            console.log(response.data);
                            self.products = response.data;
                        })
                        .catch(function (error) {
                            console.error(error);
                        });
                },
                fetchBrands: function () {
                    var self = this;
                    axios.get(apiBase + 'Brands')
                        .then(function (response) {
                            console.log(response.data);
                            self.brands = response.data;
                        })
                        .catch(function (error) {
                            console.error(error);
                        });
                },
                fetchCategories: function () {
                    var self = this;
                    axios.get(apiBase + 'Categories')
                        .then(function (response) {
                            console.log(response.data);
                            self.categories = response.data;
                        })
                        .catch(function (error) {
                            console.error(error);
                        });
                },
                fetchSubcategories: function () {
                    var self = this;
                    axios.get(apiBase + 'Subcategories')
                        .then(function (response) {
                            console.log(response.data);
                            self.subcategories = response.data;
                        })
                        .catch(function (error) {
                            console.error(error);
                        });
                },
                toEditMode: function (isEditMode) {
                    var self = this;
                    self.isReadOnly = false;
                    self.isEditMode = isEditMode;

                    if (!self.isEditMode) {
                        self.productRequest = {
                            name: "",
                            id: "00000000-0000-0000-0000-000000000000",
                            price: "0",
                            image: "https://i.postimg.cc/1X9YcxyL/Placeholder.jpg",
                            brandId: "00000000-0000-0000-0001-000000000001",
                            categoryId: "00000000-0000-0000-0002-000000000001",
                            subCategoryId: "00000000-0000-0000-0003-000000000001"
                        }
                    }
                },
                saveProduct: function () {
                    var self = this;
                    if (self.isEditMode) {
                        console.log('edit product:', self.productRequest);
                        let price = self.productRequest.price;
                        self.productRequest.price = price.toString();

                        var url = (`${apiBase}Products`);
                        axios.put(url, self.productRequest, axiosConfig)
                            .then(function (response) {
                                console.log('edited product response: ', response)
                                self.productResponse = response.data;
                            })
                            .catch(function (error) {
                                console.error(error);
                            })
                            .then(function () {
                                self.isReadOnly = true;
                                self.feedback = `Product ${self.productRequest.name} has been modified`;
                                setTimeout(function () { self.feedback = null; }, 3000);
                            });
                    }
                    else {
                        console.log('add product:', self.productRequest);

                        var url = `${apiBase}Products`;
                        axios.post(url, self.productRequest, axiosConfig)
                            .then(function (response) {
                                console.log('added product response: ', response)
                            })
                            .catch(function (error) {
                                console.error(error);
                            })
                            .then(function () {
                                self.isReadOnly = true;
                                self.feedback = `Product ${self.productRequest.name} has been created`;
                                setTimeout(function () { self.feedback = null; }, 3000);
                            });
                    }
                    this.fetchProducts();
                },
                deleteProduct: function () {
                    var self = this;
                    var url = `${apiBase}Products/${self.productRequest.id}`;

                    axios.delete(url, axiosConfig)
                        .then(function (response) {
                            self.products.forEach(function (product, i) {
                                if (product.id === self.productRequest.id) {
                                    self.products.splice(i, 1);
                                }
                            })
                        })
                        .catch(function (error) { console.error(error); })
                        .then(function () {
                            self.feedback = `Product ${self.productRequest.name} has been deleted successfully!`;
                            setTimeout(function () { self.feedback = null; }, 3000);
                        });
                },
                getProductDetails: function (product) {
                    var self = this;

                    let selectedProduct = {
                        id: product.id,
                        name: product.name,
                        price: product.price,
                        image: product.image,
                        brandId: product.brand.id,
                        categoryId: product.category.id,
                        subCategoryId: product.subcategory.id
                    }
                    self.productResponse = product;
                    self.productRequest = selectedProduct;

                    window.scrollTo(0, 0);
                },
                selectImage(event) {
                    var self = this;
                    console.log("test select image", event);
                    self.selectedImage = event.target.files[0];
                    console.log(self.selectedImage);
                },
                uploadImage: function (file, onUploadProgress) {
                    var url = `${apiBase}Products/${productResponse.id}/image`;
                    let formData = new FormData();
                    formData.append("image", this.newImage, this.newImage.name);
                    axios.post(url, formData)
                        .then(response => {
                            console.log(response);
                        })
                }
            }
        });
    </script>
}