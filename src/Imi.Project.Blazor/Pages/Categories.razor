@using Imi.Project.Blazor.Services
@using Imi.Project.Blazor.Models
@using Imi.Project.Blazor.Components

@page "/categories"
@inject ICRUDService<CategoryListItem, CategoryItem> service;

<h2>Product Categories</h2>
<div class="mt-3">
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">
            @error
        </div>
    }

    @if (currentCategory == null)
    {
        <CategoriesList CategoryListItems="categoryListItems"
                        OnAddClick="AddCategory"
                        OnEditClick="EditCategory"
                        OnDeleteClick="DeleteCategory">
        </CategoriesList>
    }
    else
    {
        <Category ProductCategory="currentCategory"
                  OnSaveClick="SaveCategory"
                  OnCancelClick="ShowList">
        </Category>
    }
</div>


@code {
    private CategoryListItem[] categoryListItems = new CategoryListItem[0];
    private CategoryItem currentCategory;
    private string error;

    protected override async Task OnInitializedAsync()
    {
        await ShowList();
    }

    public async Task ShowList()
    {
        categoryListItems = await service.GetList();
        this.currentCategory = null;
    }
    public async Task AddCategory()
    {
        this.currentCategory = await service.GetNew();
    }
    public async Task EditCategory(CategoryListItem item)
    {
        this.currentCategory = await service.Get(item.Id);
    }
    public async Task SaveCategory(CategoryItem item)
    {
        try
        {
            if (currentCategory.Id == Guid.Empty)
            {
                await service.Create(currentCategory);
            }
            else
            {
                await service.Update(currentCategory);
            }
            await this.ShowList();
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
    }
    public async Task DeleteCategory(CategoryListItem item)
    {
        try
        {
            await service.Delete(item.Id);
            await this.ShowList();
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
    }
}
